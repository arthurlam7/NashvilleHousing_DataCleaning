/*

Cleaning Data in SQL Queries

*/

/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [UniqueID ]
      ,[ParcelID]
      ,[LandUse]
      ,[PropertyAddress]
      ,[SaleDate]
      ,[SalePrice]
      ,[LegalReference]
      ,[SoldAsVacant]
      ,[OwnerName]
      ,[OwnerAddress]
      ,[Acreage]
      ,[TaxDistrict]
      ,[LandValue]
      ,[BuildingValue]
      ,[TotalValue]
      ,[YearBuilt]
      ,[Bedrooms]
      ,[FullBath]
      ,[HalfBath]
  FROM [Portfolio Project].[dbo].[NashvilleHousing] 

---------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format

Alter Table [Portfolio Project].[dbo].[NashvilleHousing] 
Add SaleDateConverted Date; 

Update [Portfolio Project].[dbo].[NashvilleHousing]  
Set SaleDateConverted = CONVERT(Date, SaleDate)

SELECT SaleDateConverted, convert(date, SaleDate) 
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

---------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address Data 

SELECT *
FROM [Portfolio Project].[dbo].[NashvilleHousing] 
--Where PropertyAddress is Null
Order by ParcelID -- Match Null Property Address using PacelID 

-- Self Join
SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [Portfolio Project].[dbo].[NashvilleHousing] a
Join [Portfolio Project].[dbo].[NashvilleHousing] b
	On a.ParcelID = b.ParcelID
	And a.UniqueID <> b.UniqueID 
Where a.PropertyAddress is null 

Update a
Set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [Portfolio Project].[dbo].[NashvilleHousing] a
Join [Portfolio Project].[dbo].[NashvilleHousing] b
	On a.ParcelID = b.ParcelID
	And a.UniqueID <> b.UniqueID 
Where a.PropertyAddress is null 

---------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State) 

--- Using SUBSTRING and CHARINDEX for Property Address 
SELECT PropertyAddress
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

SELECT 
Substring(PropertyAddress, 1, Charindex(',', PropertyAddress) -1) as Address 
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address, --SUBSTRING(which column, where to start, where to end) 
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) as City
From [Portfolio Project].[dbo].[NashvilleHousing] 

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing] 
ADD PropertySplitAddress NVARCHAR(255); 

UPDATE [Portfolio Project].[dbo].[NashvilleHousing] 
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) --find comma as seperator, but exclude it 

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing] 
ADD PropertySplitCity NVARCHAR(255); 

UPDATE [Portfolio Project].[dbo].[NashvilleHousing] 
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress))  

SELECT PropertySplitAddress, PropertySplitCity
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

--- Using PARSENAME for Owner Address
SELECT OwnerAddress
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

--- PARSENAME works backward therfore we use 3,2,1. PARSENAME only look for period therefore we replace comma with it in the column expressionSELECT 
PARSENAME(REPLACE(OwnerAddress, ',', '.') ,3), 
PARSENAME(REPLACE(OwnerAddress, ',', '.') ,2),
PARSENAME(REPLACE(OwnerAddress, ',', '.') ,1)
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing] 
Add OwnerSplitAddress Nvarchar(255); 

UPDATE [Portfolio Project].[dbo].[NashvilleHousing] 
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') ,3); 

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing]
Add OwnerSplitCity Nvarchar(255); 

UPDATE [Portfolio Project].[dbo].[NashvilleHousing] 
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') ,2); 

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing]
Add OwnerSplitState Nvarchar(255);

UPDATE [Portfolio Project].[dbo].[NashvilleHousing] 
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') ,1); 

SELECT OwnerSplitAddress, OwnerSplitCity, OwnerSplitState
FROM [Portfolio Project].[dbo].[NashvilleHousing] 

---------------------------------------------------------------------------------------------------------------------------
-- Change Y and N to Yes and No in "Sold as Vacant" field 

SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM [Portfolio Project].[dbo].[NashvilleHousing] 
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant, 
CASE When SoldAsVacant = 'Y' THEN 'Yes'
	When SoldAsVacant = 'N' THEN 'No'
	ELSE SoldAsVacant
	END
FROM [Portfolio Project].[dbo].[NashvilleHousing]

Update 	[Portfolio Project].[dbo].[NashvilleHousing] 
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	When SoldAsVacant = 'N' THEN 'No'
	ELSE SoldAsVacant
	END

---------------------------------------------------------------------------------------------------------------------------
-- Remove Duplicate Using CTE 

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER( 
	PARTITION BY ParcelID,
				PropertyAddress,
				SalePrice,
				SaleDate,
				LegalReference
				ORDER BY 
					UniqueID
					) row_num
FROM [Portfolio Project].[dbo].[NashvilleHousing]
)
--SELECT * 
DELETE
FROM RowNumCTE
WHERE row_num>1

---------------------------------------------------------------------------------------------------------------------------
-- Delete Unused Column 

SELECT *
FROM [Portfolio Project].[dbo].[NashvilleHousing]

ALTER TABLE [Portfolio Project].[dbo].[NashvilleHousing]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress 
